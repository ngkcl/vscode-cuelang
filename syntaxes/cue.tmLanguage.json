{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cue",
	"patterns": [
		{
			"include": "#whitespace"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#primitives"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.cue",
					"match": "\\b(if|in|for|let)\\b"
				},
				{
					"name": "keyword.value.cue",
					"match": "\\b(null|true|false)\\b"
				},
				{
					"name": "keyword.preamble.cue",
					"match": "\\b(package|import)\\b"
				},
				{
					"match": "[\\+\\-\\*]|/(?![/*])",
					"name": "keyword.operator.cue"
				},
				{
					"match": "(?<![\\p{L}\\p{Nd}_\\$\\#])(?:div|mod|quo|rem)(?![\\p{L}\\p{Nd}_\\$\\#])",
					"name": "keyword.operator.word.cue"
				},
				{
					"match": "=[=~]|![=~]|<=|>=|[<](?![-=])|[>](?![=])",
					"name": "keyword.operator.comparison.cue"
				},
				{
					"match": "&{2}|\\|{2}|!(?![=~])",
					"name": "keyword.operator.logical.cue"
				},
				{
					"match": "&(?!&)|\\|(?!\\|)",
					"name": "keyword.operator.set.cue"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"name": "support.type.property-name.cue",
					"match": "(#\\w*)"
				},
				{
					"name": "variable.parameter.cue",
					"match": "(\\w*?):"
				}
			]
		},
		"comments": {
            "patterns": [
                {
                    "begin": "/\\*\\*(?!/)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.cue"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.documentation.cue"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.cue"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.cue"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.cue"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash.js"
                }
            ]
        },
		"constants": {
			"patterns": [
				{
					"match": "(?<![\\p{L}\\p{Nd}_\\$\\#])_(?!\\|)(?![\\p{L}\\p{Nd}_\\$\\#])",
					"name": "constant.language.top.cue"
				},
				{
					"match": "(?<![\\p{L}\\p{Nd}_\\$\\#])_\\|_(?![\\p{L}\\p{Nd}_\\$\\#])",
					"name": "constant.language.bottom.cue"
				},
				{
					"match": "(?<![\\p{L}\\p{Nd}_\\$\\#])null(?![\\p{L}\\p{Nd}_\\$\\#])",
					"name": "constant.language.null.cue"
				},
				{
					"match": "\\b((0(x|X)[0-9a-fA-F_]*)|(([0-9][0-9_]*\\.[0-9][0-9_]*)|(\\.[0-9][0-9_]*))((e|E)(\\+|-)?[0-9][0-9_]*)?|[0-9][0-9_]*)([LlFfDd]|UL|ul)?\\b",
					"name": "constant.numeric.cue"
				}
			]
		},
		"primitives": {
			"patterns": [
				{
					"name": "storage.type.cue",
					"match": "\\b(null|bool|string|bytes|number|int|float|struct|list)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.cue",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cue",
					"match": "\\\\."
				}
			]
		},
		"whitespace": {
			"match": "[ \\t\\r\\n]+"
		}
	},
	"scopeName": "source.cuelang"
}